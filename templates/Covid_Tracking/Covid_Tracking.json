{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"github_source": {
			"type": "string"
		},
		"common_datalake_ls": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Covid_Tracking')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Covid Tracking (Cases/Deaths): https://covidtracking.com/api/v1/states/daily.json",
				"activities": [
					{
						"name": "To Raw Partition",
						"description": "https://covidtracking.com/api/v1/states/daily.json",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Github_dataset",
								"type": "DatasetReference",
								"parameters": {
									"relativeUrl": {
										"value": "@pipeline().parameters.sourceRelativeUrl",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_dataset1",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@concat(pipeline().parameters.rawBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
										"type": "Expression"
									},
									"file": {
										"value": "@concat(pipeline().parameters.sourceFilename,'_',pipeline().RunId,'.csv')",
										"type": "Expression"
									},
									"container": {
										"value": "@pipeline().parameters.blobContainer",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "To Raw Overwrite",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Github_dataset",
								"type": "DatasetReference",
								"parameters": {
									"relativeUrl": {
										"value": "@pipeline().parameters.sourceRelativeUrl",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "csv_dataset1",
								"type": "DatasetReference",
								"parameters": {
									"directory": {
										"value": "@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
										"type": "Expression"
									},
									"file": {
										"value": "@pipeline().parameters.sourceFilename",
										"type": "Expression"
									},
									"container": {
										"value": "@pipeline().parameters.blobContainer",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Reformat Columns",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "To Raw Partition",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "To Raw Overwrite",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CovidTracking_transform",
								"type": "DataFlowReference",
								"parameters": {
									"filename": {
										"value": "'@{pipeline().parameters.filename}'",
										"type": "Expression"
									},
									"runid": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceCSV": {
										"directory": {
											"value": "@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
											"type": "Expression"
										},
										"file": {
											"value": "@pipeline().parameters.sourceFilename",
											"type": "Expression"
										},
										"container": {
											"value": "@pipeline().parameters.blobContainer",
											"type": "Expression"
										}
									},
									"SinkLatestCSV": {
										"directory": {
											"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
											"type": "Expression"
										},
										"file": {
											"value": "@concat(pipeline().parameters.filename,'.csv')",
											"type": "Expression"
										},
										"container": {
											"value": "@pipeline().parameters.blobContainer",
											"type": "Expression"
										}
									},
									"sinkLatestJsonl": {
										"container": {
											"value": "@pipeline().parameters.blobContainer",
											"type": "Expression"
										},
										"directory": {
											"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
											"type": "Expression"
										},
										"file": {
											"value": "@concat(pipeline().parameters.filename,'.jsonl')",
											"type": "Expression"
										}
									},
									"SinkCSV": {
										"directory": {
											"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
											"type": "Expression"
										},
										"file": "specified in data flow",
										"container": {
											"value": "@pipeline().parameters.blobContainer",
											"type": "Expression"
										}
									},
									"sinkJsonl": {
										"container": {
											"value": "@pipeline().parameters.blobContainer",
											"type": "Expression"
										},
										"directory": {
											"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
											"type": "Expression"
										},
										"file": "specified in data flow"
									},
									"sinkLatestParquet": {
										"container": {
											"value": "@pipeline().parameters.blobContainer",
											"type": "Expression"
										},
										"directory": {
											"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
											"type": "Expression"
										},
										"file": "specified in data flow"
									},
									"sinkParquet": {
										"container": {
											"value": "@pipeline().parameters.blobContainer",
											"type": "Expression"
										},
										"directory": {
											"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
											"type": "Expression"
										},
										"file": "specified in data flow"
									}
								}
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					},
					{
						"name": "JSONL to JSON LATEST",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Reformat Columns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"quoteAllText": true,
									"filePattern": "arrayOfObjects"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "json_dataset1",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.blobContainer",
										"type": "Expression"
									},
									"directory": {
										"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
										"type": "Expression"
									},
									"file": {
										"value": "@concat(pipeline().parameters.filename,'.jsonl')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "json_dataset1",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.blobContainer",
										"type": "Expression"
									},
									"directory": {
										"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
										"type": "Expression"
									},
									"file": {
										"value": "@concat(pipeline().parameters.filename,'.json')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "JSONL to JSON",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Reformat Columns",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"quoteAllText": true,
									"filePattern": "arrayOfObjects"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "json_dataset1",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.blobContainer",
										"type": "Expression"
									},
									"directory": {
										"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
										"type": "Expression"
									},
									"file": {
										"value": "@concat(pipeline().parameters.filename,'.jsonl')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "json_dataset1",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.blobContainer",
										"type": "Expression"
									},
									"directory": {
										"value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
										"type": "Expression"
									},
									"file": {
										"value": "@concat(pipeline().parameters.filename,'_',pipeline().RunId,'.json')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"parameters": {
					"sourceFilename": {
						"type": "string",
						"defaultValue": "states_daily_4pm_et.csv"
					},
					"sourceRelativeUrl": {
						"type": "string",
						"defaultValue": "COVID19Tracking/covid-tracking-data/master/data/states_daily_4pm_et.csv"
					},
					"blobContainer": {
						"type": "string",
						"defaultValue": "public"
					},
					"rawBlobDirectory": {
						"type": "string",
						"defaultValue": "raw/covid-19/covid_tracking"
					},
					"curatedBlobDirectory": {
						"type": "string",
						"defaultValue": "curated/covid-19/covid_tracking"
					},
					"filename": {
						"type": "string",
						"defaultValue": "covid_tracking"
					}
				},
				"folder": {
					"name": "Case Data"
				},
				"annotations": [
					"covidtracking"
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Github_dataset')]",
				"[concat(variables('factoryId'), '/datasets/csv_dataset1')]",
				"[concat(variables('factoryId'), '/dataflows/CovidTracking_transform')]",
				"[concat(variables('factoryId'), '/datasets/json_dataset1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Github_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('github_source')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"relativeUrl": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Sources"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().relativeUrl",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Updated",
						"type": "String"
					},
					{
						"name": "Confirmed",
						"type": "String"
					},
					{
						"name": "ConfirmedChange",
						"type": "String"
					},
					{
						"name": "Deaths",
						"type": "String"
					},
					{
						"name": "DeathsChange",
						"type": "String"
					},
					{
						"name": "Recovered",
						"type": "String"
					},
					{
						"name": "RecoveredChange",
						"type": "String"
					},
					{
						"name": "Latitude",
						"type": "String"
					},
					{
						"name": "Longitude",
						"type": "String"
					},
					{
						"name": "ISO2",
						"type": "String"
					},
					{
						"name": "ISO3",
						"type": "String"
					},
					{
						"name": "Country_Region",
						"type": "String"
					},
					{
						"name": "AdminRegion1",
						"type": "String"
					},
					{
						"name": "AdminRegion2",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_dataset1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('common_datalake_ls')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"container": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Parameterized"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CovidTracking_transform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Update ISO 3166-2 code",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "csv_dataset1",
								"type": "DatasetReference"
							},
							"name": "sourceCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "csv_sinkonly_dataset1",
								"type": "DatasetReference"
							},
							"name": "SinkLatestCSV"
						},
						{
							"dataset": {
								"referenceName": "json_dataset1",
								"type": "DatasetReference"
							},
							"name": "sinkLatestJsonl"
						},
						{
							"dataset": {
								"referenceName": "csv_sinkonly_dataset1",
								"type": "DatasetReference"
							},
							"name": "SinkCSV"
						},
						{
							"dataset": {
								"referenceName": "json_dataset1",
								"type": "DatasetReference"
							},
							"name": "sinkJsonl"
						},
						{
							"dataset": {
								"referenceName": "parquet_dataset1",
								"type": "DatasetReference"
							},
							"name": "sinkLatestParquet"
						},
						{
							"dataset": {
								"referenceName": "parquet_dataset1",
								"type": "DatasetReference"
							},
							"name": "sinkParquet"
						}
					],
					"transformations": [
						{
							"name": "DropExtraColumns"
						},
						{
							"name": "LoadDateAndISOCountry"
						},
						{
							"name": "ReformatColumnNames"
						}
					],
					"script": "parameters{\n\tfilename as string ('covid_tracking'),\n\trunid as string ('runtime_guid')\n}\nsource(output(\n\t\tdate as date 'yyyyMMdd',\n\t\tstate as string,\n\t\tpositive as integer,\n\t\tnegative as integer,\n\t\tpending as short,\n\t\thospitalizedCurrently as short,\n\t\thospitalizedCumulative as integer,\n\t\tinIcuCurrently as short,\n\t\tinIcuCumulative as short,\n\t\tonVentilatorCurrently as short,\n\t\tonVentilatorCumulative as short,\n\t\trecovered as integer,\n\t\tdataQualityGrade as string,\n\t\tlastUpdateEt as timestamp 'MM/dd/yyyy HH:mm',\n\t\thash as string,\n\t\tdateChecked as string,\n\t\tdeath as short,\n\t\thospitalized as integer,\n\t\ttotal as integer,\n\t\ttotalTestResults as integer,\n\t\tposNeg as integer,\n\t\tfips as short,\n\t\tdeathIncrease as short,\n\t\thospitalizedIncrease as short,\n\t\tnegativeIncrease as integer,\n\t\tpositiveIncrease as short,\n\t\ttotalTestResultsIncrease as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn: 'lineage') ~> sourceCSV\nReformatColumnNames select(mapColumn(\n\t\tdate,\n\t\tstate,\n\t\tpositive,\n\t\tnegative,\n\t\tpending,\n\t\thospitalized_currently = hospitalizedcurrently,\n\t\thospitalized_cumulative = hospitalizedcumulative,\n\t\tin_icu_currently = inicucurrently,\n\t\tin_icu_cumulative = inicucumulative,\n\t\ton_ventilator_currently = onventilatorcurrently,\n\t\ton_ventilator_cumulative = onventilatorcumulative,\n\t\trecovered,\n\t\tdata_quality_grade = dataqualitygrade,\n\t\tlast_update_et = lastupdateet,\n\t\thash,\n\t\tdate_checked = datechecked,\n\t\tdeath,\n\t\thospitalized,\n\t\ttotal,\n\t\ttotal_test_results = totaltestresults,\n\t\tpos_neg = posneg,\n\t\tfips,\n\t\tdeath_increase = deathincrease,\n\t\thospitalized_increase = hospitalizedincrease,\n\t\tnegative_increase = negativeincrease,\n\t\tpositive_increase = positiveincrease,\n\t\ttotal_test_results_increase = totaltestresultsincrease,\n\t\tload_time,\n\t\tiso_country\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropExtraColumns\nsourceCSV derive(load_time = currentUTC('yyyy-MM-dd'),\n\t\tiso_country = 'US') ~> LoadDateAndISOCountry\nLoadDateAndISOCountry select(mapColumn(\n\t\teach(patternMatch(`.*`),\n\t\t\tregexReplace(lower($$),' ','_') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ReformatColumnNames\nDropExtraColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename, '.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkLatestCSV\nDropExtraColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename, '.jsonl'))],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkLatestJsonl\nDropExtraColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkCSV\nDropExtraColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.jsonl'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkJsonl\nDropExtraColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concat($filename, '.parquet'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkLatestParquet\nDropExtraColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.parquet'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkParquet"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/csv_dataset1')]",
				"[concat(variables('factoryId'), '/datasets/csv_sinkonly_dataset1')]",
				"[concat(variables('factoryId'), '/datasets/json_dataset1')]",
				"[concat(variables('factoryId'), '/datasets/parquet_dataset1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/json_dataset1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('common_datalake_ls')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Parameterized"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/csv_sinkonly_dataset1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('common_datalake_ls')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					},
					"container": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Parameterized"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parquet_dataset1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('common_datalake_ls')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Parameterized"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		}
	]
}